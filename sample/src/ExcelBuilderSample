package com.newlight77.sample;

import fr.enedis.microapp.prm.datamodel.ResultStatus;
import fr.enedis.microapp.prm.datamodel.TypeSite;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class ExcelBuilderSample {

    public static void main(String[] args) {
        File file = new ExcelBuilder(new Config(), new Items())
                .dateTimeFormat("yyyyMMdd-HHmmss-SSS")
                .header()
                .titleStyle()
                .cellStyle()
                .address()
                .items()
                .buildFile();
        //send file
    }

}

class Config {

    private String dateformat = "yyyyMMdd-HHmmss-SSS";
    private String sheetName = "Sheet name";
    private String font = "Arial";
    private String headerTitle = "Header Title";
    private String addressTitle = "Address";
    private String itemsTitle = "Items";
    private String[] itemsHeaders = new String[] {"Streee, city, postal code"};

    public String getDateformat() {
        return dateformat;
    }

    public String getSheetName() {
        return sheetName;
    }

    public String getFont() {
        return font;
    }

    public String getHeaderTitle() {
        return headerTitle;
    }

    public String getAddressTitle() {
        return addressTitle;
    }

    public String getItemsTitle() {
        return itemsTitle;
    }

    public String[] getItemsHeaders() {
        return itemsHeaders;
    }
}

class Item {
    private String uid;
    private String name;
    private String quantity;
    private String status;

    public String getUid() {
        return uid;
    }

    public String getName() {
        return name;
    }

    public String getQuantity() {
        return quantity;
    }

    public String getStatus() {
        return status;
    }
}

class Address {
    private String street;
    private String postalCode;
    private String city;

    public String getCity() {
        return city;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public String getStreet() {
        return street;
    }
}

class Items {

    private Address address;
    private List<Item> items;

    public Address getAddress() {
        return address;
    }

    public List<Item> getItems() {
        return items;
    }
}

public class ExcelBuilder {
    private static final Logger LOGGER = LoggerFactory.getLogger(ExcelBuilder.class);

    private static final String DEFAULT_DATE_FORMAT = "yyyyMMdd-HHmmss-SSS";
    private DateTimeFormatter dateTimeFormatter;
    private Config excelConfig;
    private Items items;
    private Workbook workbook;
    private Sheet sheet;
    private CellStyle titleStyle;
    private CellStyle style;
    private long numberOK;
    private int startRow;
    private TypeSite typeSite = TypeSite.VERTICAL;

    public ExcelBuilder(final Config excelConfig, final Items items) {
        this.excelConfig = excelConfig;
        this.items = items;
        init();
    }

    private void init() {
        dateTimeFormatter = DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT);
        numberOK = items.getItems().stream().filter(ExcelBuilder::isOk).count();
        workbook = new XSSFWorkbook();
        initSheet();
    }

    private void initSheet() {
        sheet = workbook.createSheet(excelConfig.getSheetName());
        sheet.setColumnWidth(0, 10500);
        for (int i = 1; i <= 18; i++) {
            sheet.setColumnWidth(i, 6000);
        }
    }

    public ExcelBuilder dateTimeFormat(String dateFormat) {
        try {
            dateTimeFormatter = DateTimeFormatter.ofPattern(dateFormat);
        } catch (Exception ex) {
            LOGGER.error("DateFormat {} is invalid, using default one {}", dateFormat, DEFAULT_DATE_FORMAT);
        }
        return this;
    }

    public ExcelBuilder typeSite(TypeSite typeSite) {
        this.typeSite = typeSite;
        return this;
    }

    public ExcelBuilder header() {

        Row header = sheet.createRow(0);

        CellStyle headerStyle = workbook.createCellStyle();
        headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        XSSFFont font = ((XSSFWorkbook) workbook).createFont();
        font.setFontName(excelConfig.getFont());
        font.setFontHeightInPoints((short) 14);
        font.setBold(true);
        headerStyle.setFont(font);
        headerStyle.setWrapText(false);

        Cell headerCell = header.createCell(0);
        headerCell.setCellValue(excelConfig.getHeaderTitle());
        headerCell.setCellStyle(headerStyle);
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 1));

        return  this;
    }

    public ExcelBuilder titleStyle() {
        titleStyle = workbook.createCellStyle();
        titleStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
        titleStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        XSSFFont titleFont = ((XSSFWorkbook) workbook).createFont();
        titleFont.setFontName(excelConfig.getFont());
        titleFont.setFontHeightInPoints((short) 12);
        titleFont.setUnderline(FontUnderline.SINGLE);
        titleStyle.setFont(titleFont);
        return this;
    }

    public ExcelBuilder cellStyle() {
        style = workbook.createCellStyle();
        style.setWrapText(true);
        return this;
    }

    public ExcelBuilder address() {
        Row row = sheet.createRow(startRow);
        createCell(excelConfig.getAddressTitle(), row, 0, titleStyle);
        sheet.addMergedRegion(new CellRangeAddress(startRow, startRow, 0, 1));
        startRow = startRow + 1;
        Row adresseSiteRow = sheet.createRow(startRow++);
        Cell adresseSiteCell = adresseSiteRow.createCell(0);
        Address address = items.getAddress();
        StringBuffer addressSb = new StringBuffer();
        addressSb.append(address.getStreet()).append(' ');
        addressSb.append(address.getCity()).append(' ');
        addressSb.append(address.getPostalCode()).append(' ');
        adresseSiteCell.setCellValue(addressSb.toString());
        adresseSiteCell.setCellStyle(style);
        startRow = startRow + 1;
        return this;
    }

    public ExcelBuilder items() {

        Row row = sheet.createRow(startRow);
        createCell(excelConfig.getItemsTitle(), row, 0, titleStyle);
        sheet.addMergedRegion(new CellRangeAddress(startRow, startRow, 0, 1));

        startRow = startRow + 1;

        // Headers vertical
        String[] headers = excelConfig.getItemsHeaders();
        row = sheet.createRow(startRow++);
        for(int cellIdx = 0; cellIdx < headers.length; cellIdx++) {
            createCell(headers[cellIdx], row, cellIdx, style);
        }

        for (Item item : items.getItems()) {

            row = sheet.createRow(startRow++);

            createCell(item.getUid(), row, 0, style);
            createCell(item.getName(), row, 1, style);
            createCell(String.valueOf(item.getQuantity()), row, 2, style);
            String status = (item.getStatus() != null ? item.getStatus().toString() : "UNKNOWN");
            createCell(status, row, 3, style);

        }

        startRow = startRow + 1;

        return this;
    }

    public File buildFile() {
        StringBuffer xlsxFileSb = fileName();
        LOGGER.info("Save demandes to file='{}'", xlsxFileSb.toString());
        File resultFile = new File(System.getProperty("java.io.tmpdir"), xlsxFileSb.toString());
        try {
            FileOutputStream outputStream = new FileOutputStream(resultFile);
            workbook.write(outputStream);
        } catch (Exception ex) {
            LOGGER.error("Erreur lors de la crÃ©ation du fichier excel", ex);
        } finally {
            try {
                workbook.close();
            } catch (Exception e) {
                // CANT HAPPEN
            }
        }
        return resultFile;
    }

    private StringBuffer fileName() {
        StringBuffer xlsxFileSb = new StringBuffer();
        xlsxFileSb.append("items");
        xlsxFileSb.append('-').append(dateTimeFormatter.format(LocalDateTime.now()));
        xlsxFileSb.append('-').append(items.getAddress().getPostalCode());
        xlsxFileSb.append('-').append(items.getAddress().getCity());
        xlsxFileSb.append('-').append(numberOK);
        xlsxFileSb.append('-').append(items.getItems().size());
        xlsxFileSb.append(".xlsx");
        return xlsxFileSb;
    }

    private static void createCell(String cellValue, Row row, int index, CellStyle style) {
        String value = StringUtils.isNotEmpty(cellValue) ? cellValue : "";
        Cell cell = row.createCell(index);
        cell.setCellValue(value);
        cell.setCellStyle(style);
    }


    private static boolean isOk(Item item) {
        return ResultStatus.SENT.equals(item.getStatus());
    }

}
